# Generated by precisionFDA exporter (v1.0.3) on 2018-06-14 04:02:56 +0000
# The asset download links in this file are valid only for 24h.

# Exported app: freebayes, revision: 14, authored by: marghoob.mohiyuddin
# https://precision.fda.gov/apps/app-BkZJ3Gj0V1220FgQJbY1Y4GQ

# For more information please consult the app export section in the precisionFDA docs

# Start with Ubuntu 14.04 base image
FROM ubuntu:14.04

# Install default precisionFDA Ubuntu packages
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y \
	aria2 \
	byobu \
	cmake \
	cpanminus \
	curl \
	dstat \
	g++ \
	git \
	htop \
	libboost-all-dev \
	libcurl4-openssl-dev \
	libncurses5-dev \
	make \
	perl \
	pypy \
	python-dev \
	python-pip \
	r-base \
	ruby1.9.3 \
	wget \
	xz-utils

# Install default precisionFDA python packages
RUN pip install \
	requests==2.5.0 \
	futures==2.2.0 \
	setuptools==10.2

# Add DNAnexus repo to apt-get
RUN /bin/bash -c "echo 'deb http://dnanexus-apt-prod.s3.amazonaws.com/ubuntu trusty/amd64/' > /etc/apt/sources.list.d/dnanexus.list"
RUN /bin/bash -c "echo 'deb http://dnanexus-apt-prod.s3.amazonaws.com/ubuntu trusty/all/' >> /etc/apt/sources.list.d/dnanexus.list"
RUN curl https://wiki.dnanexus.com/images/files/ubuntu-signing-key.gpg | apt-key add -

# Install app-specific Ubuntu packages
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y \
	parallel

# Download app assets
RUN curl https://dl.dnanex.us/F/D/0gY2gGGyv9gKvG48f35G2GpKP1FYQY86qxkqQ90P/freebayes-0.9.21.tar.gz | tar xzf - -C / --no-same-owner --no-same-permissions
RUN curl https://dl.dnanex.us/F/D/610FP16pbq888jV8j6z0q3kPFf29JyXj5Qfq26pK/grch37-fasta.tar.gz | tar xzf - -C / --no-same-owner --no-same-permissions
RUN curl https://dl.dnanex.us/F/D/42bVppj3GZJX5bgXgPpGy6VfG6QjP416q9JVzKZv/hs37d5-fasta.tar.gz | tar xzf - -C / --no-same-owner --no-same-permissions
RUN curl https://dl.dnanex.us/F/D/vykQVy6XGq8ZYG1gp28bJppK7y43fyFVG4Pb5KB8/htslib-1.2.1.tar.gz | tar xzf - -C / --no-same-owner --no-same-permissions
RUN curl https://dl.dnanex.us/F/D/596023jG6X7v5kxkx30fBBx7Fg7xBkX8kP5PPJB0/small-ref.tar.gz | tar xzf - -C / --no-same-owner --no-same-permissions

# Download helper executables
RUN curl https://dl.dnanex.us/F/D/0K8P4zZvjq9vQ6qV0b6QqY1z2zvfZ0QKQP4gjBXp/emit-1.0.tar.gz | tar xzf - -C /usr/bin/ --no-same-owner --no-same-permissions
RUN curl https://dl.dnanex.us/F/D/bByKQvv1F7BFP3xXPgYXZPZjkXj9V684VPz8gb7p/run-1.2.tar.gz | tar xzf - -C /usr/bin/ --no-same-owner --no-same-permissions

# Write app spec and code to root folder
RUN ["/bin/bash","-c","echo -E \\{\\\"spec\\\":\\{\\\"input_spec\\\":\\[\\{\\\"name\\\":\\\"bam\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"BAM\\\",\\\"help\\\":\\\"Sorted\\ aligned\\ BAM\\\"\\},\\{\\\"name\\\":\\\"refname\\\",\\\"class\\\":\\\"string\\\",\\\"optional\\\":true,\\\"label\\\":\\\"Reference\\ name\\\",\\\"help\\\":\\\"\\\",\\\"default\\\":\\\"hs37d5\\\",\\\"choices\\\":\\[\\\"hs37d5\\\",\\\"grch37\\\"\\]\\},\\{\\\"name\\\":\\\"prefix\\\",\\\"class\\\":\\\"string\\\",\\\"optional\\\":false,\\\"label\\\":\\\"Output\\ prefix\\\",\\\"help\\\":\\\"Output\\ files\\ will\\ be\\ \\\\u003cprefix\\\\u003e.bam,\\ \\\\u003cprefix\\\\u003e.vcf.gz,\\ etc\\\"\\},\\{\\\"name\\\":\\\"bed\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":true,\\\"label\\\":\\\"BED\\ regions\\\",\\\"help\\\":\\\"BED\\ file\\ indicating\\ regions\\ to\\ process.\\ If\\ unspecified,\\ the\\ whole\\ genome\\ would\\ be\\ processed.\\\"\\},\\{\\\"name\\\":\\\"freebayes_opts\\\",\\\"class\\\":\\\"string\\\",\\\"optional\\\":true,\\\"label\\\":\\\"FreeBayes\\ options\\\",\\\"help\\\":\\\"Use\\ this\\ to\\ specify\\ options\\ other\\ than\\ reference,\\ BAMs\\ or\\ BED\\ regions\\\"\\},\\{\\\"name\\\":\\\"bam_bai\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"BAM\\ Index\\\",\\\"help\\\":\\\"\\\"\\},\\{\\\"name\\\":\\\"num_threads\\\",\\\"class\\\":\\\"int\\\",\\\"optional\\\":true,\\\"label\\\":\\\"Number\\ of\\ threads\\\",\\\"help\\\":\\\"Number\\ of\\ processes\\ to\\ use\\ for\\ FreeBayes\\ parallelization\\\",\\\"default\\\":1\\}\\],\\\"output_spec\\\":\\[\\{\\\"name\\\":\\\"variants_vcfgz\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"Output\\ variants\\ \\\",\\\"help\\\":\\\"Output\\ variants\\ as\\ a\\ bgzip-compressed\\ VCF.\\\"\\},\\{\\\"name\\\":\\\"variants_vcfgztbi\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"Output\\ variants\\ index\\\",\\\"help\\\":\\\"Index\\ file\\ for\\ output\\ variants\\ file.\\\"\\}\\],\\\"internet_access\\\":false,\\\"instance_type\\\":\\\"baseline-16\\\"\\},\\\"assets\\\":\\[\\\"file-BkZGPxj0X24g08zPZ8Z3j940\\\",\\\"file-Bk5xvzQ0qVb5k0VYzZQG7BXJ\\\",\\\"file-Bk5y43Q0qVb0gjfqY8f9k4g8\\\",\\\"file-Bk5K5zQ0qVb7ZjyyzjpB4F9g\\\",\\\"file-BkV0z680X24xZqgQZ4PyqY5p\\\"\\],\\\"packages\\\":\\[\\\"parallel\\\"\\]\\} \u003e /spec.json"]
RUN ["/bin/bash","-c","echo -E \\{\\\"code\\\":\\\"reference\\=\\$refname.fa\\\\n\\\\nfb_opts\\=\\(\\)\\\\nfb_opts\\+\\=\\(\\\\\\\"-f\\\\\\\"\\ \\\\\\\"\\$reference\\\\\\\"\\)\\\\nfb_opts\\+\\=\\(\\\\\\\"\\$freebayes_opts\\\\\\\"\\)\\\\n\\\\nln\\ -s\\ \\$bam_path\\ input.bam\\\\nln\\ -s\\ \\$bam_bai_path\\ input.bam.bai\\\\n\\\\nif\\ \\[\\[\\ \\!\\ -z\\ \\\\\\\"\\$bed\\\\\\\"\\ \\]\\]\\;\\ then\\\\n\\ \\ fb_opts\\+\\=\\(\\\\\\\"-t\\\\\\\"\\ \\\\\\\"\\$bed_path\\\\\\\"\\)\\\\n\\ \\ num_threads\\=1\\\\nfi\\\\n\\\\nif\\ \\(\\(num_threads\\ \\=\\=\\ 1\\)\\)\\;\\ then\\\\n\\ \\ freebayes\\ \\\\\\\"\\$\\{fb_opts\\[@\\]\\}\\\\\\\"\\ input.bam\\ \\|\\ bgzip\\ \\\\u003e\\ \\$prefix.vcf.gz\\\\nelse\\\\n\\ \\ export\\ PATH\\=\\\\\\\"/opt/freebayes/bin:\\$PATH\\\\\\\"\\ \\\\u0026\\\\u0026\\ freebayes-parallel\\ \\\\u003c\\(fasta_generate_regions.py\\ \\$reference.fai\\ 30000000\\)\\ \\$num_threads\\ \\\\\\\"\\$\\{fb_opts\\[@\\]\\}\\\\\\\"\\ input.bam\\ \\|\\ bgzip\\ \\\\u003e\\ \\$prefix.vcf.gz\\\\nfi\\\\n\\\\ntabix\\ -f\\ \\$prefix.vcf.gz\\\\n\\\\nemit\\ variants_vcfgz\\ \\$prefix.vcf.gz\\\\nemit\\ variants_vcfgztbi\\ \\$prefix.vcf.gz.tbi\\\"\\} | python -c 'import sys,json; print json.load(sys.stdin)[\"code\"]' \u003e /script.sh"]

# Create directory /work and set it to $HOME and CWD
RUN mkdir -p /work
ENV HOME="/work"
WORKDIR /work

# Set entry point to container
ENTRYPOINT ["/usr/bin/run"]

VOLUME /data
VOLUME /work